
1. Booked for Nights
-------------------------------------------------------------------
SELECT
    concat(a.address, ' ', a.address_2) AS "Apartment Address",
    b.booked_for AS "Nights"
FROM
    apartments as a
    JOIN
       bookings as b
    USING (booking_id)
ORDER BY
    a.apartment_id;
-------------------------------------------------------------------


2. First 10 Apartments Booked At LEFT JOIN
-------------------------------------------------------------------
SELECT
    a.name AS "Name",
    a.country AS "Country",
    b.booked_at::date AS "Booked at"
FROM
    apartments as a
LEFT JOIN
    bookings as b
USING (booking_id)
LIMIT 10;
-------------------------------------------------------------------


3. First 10 Customers with Bookings
-------------------------------------------------------------------
SELECT
    b.booking_id AS "Booking ID",
    b.starts_at::DATE AS "Start Date",
    b.apartment_id AS "Apartment ID",
    concat(c.first_name, ' ', c.last_name) AS "Customer Name"
FROM
    bookings as b
RIGHT JOIN
    customers AS c
USING (customer_id)
ORDER BY
    "Customer Name" ASC
LIMIT 10;
-------------------------------------------------------------------

4. Booking Information
-------------------------------------------------------------------
SELECT
    b.booking_id,
    a.name as apartment_owner,
    a.apartment_id,
    concat(c.first_name, ' ', c.last_name) AS customer_name
FROM
    apartments as a
FULL JOIN
    bookings as b
USING (booking_id)
FULL JOIN
    customers AS c
USING
    (customer_id)
ORDER BY
    booking_id ASC,
    apartment_owner ASC,
    customer_name ASC;
-------------------------------------------------------------------


5. Multiplication of Information**
-------------------------------------------------------------------
SELECT
    b.booking_id AS "Booking ID",
    c.first_name AS "Customer Name"
FROM
    bookings AS b
CROSS JOIN
    customers AS c
ORDER BY
    "Customer Name" ASC;
-------------------------------------------------------------------


6. Unassigned Apartments
-------------------------------------------------------------------
SELECT
    b.booking_id,
    b.apartment_id,
    c.companion_full_name
FROM
    bookings AS b
JOIN
    customers AS c
USING (customer_id)
WHERE b.apartment_id IS NULL
-------------------------------------------------------------------


7. Bookings Made by Lead
-------------------------------------------------------------------
SELECT
    b.apartment_id,
    b.booked_for,
    c.first_name,
    c.country
FROM
    bookings as b
JOIN
    customers as c
USING
    (customer_id)
WHERE 
    c.job_type = 'Lead';
-------------------------------------------------------------------


8. Hahn's Bookings
-------------------------------------------------------------------
SELECT
    count(*)
FROM
    bookings as b
JOIN
    customers as c
USING 
    (customer_id)
WHERE
    c.last_name LIKE '%Hahn'
-------------------------------------------------------------------

9. Total Sum of Nights
-------------------------------------------------------------------
SELECT
    a.name,
    SUM(b.booked_for)
FROM
    apartments as a
JOIN
    bookings as b
USING (apartment_id)
GROUP BY
    a.name
ORDER BY
    a.name ASC;
-------------------------------------------------------------------


10. Popular Vacation Destination
-------------------------------------------------------------------
SELECT
    a.country,
    count(b.booking_id) AS booking_count
FROM
    bookings AS b
JOIN
    apartments AS a
USING
    (apartment_id)
WHERE
    b.booked_at > '2021-05-18 07:52:09.904+03' AND b.booked_at < '2021-09-17 19:48:02.147+03'
GROUP BY
    a.country
ORDER BY
    booking_count DESC;
-------------------------------------------------------------------

11. Bulgaria's Peaks Higher than 2835 Meters
-------------------------------------------------------------------
SELECT
    mc.country_code,
    m.mountain_range,
    p.peak_name,
    p.elevation
FROM
    mountains_countries AS mc
JOIN
    mountains AS m
ON mc.mountain_id = m.id
JOIN
    peaks as p
ON
    p.mountain_id = m.id
WHERE
    p.elevation > 2835
    AND
    mc.country_code = 'BG'
ORDER BY
    p.elevation DESC;
-------------------------------------------------------------------


12. Count Mountain Ranges
-------------------------------------------------------------------
SELECT
    mc.country_code,
    count(m.mountain_range) AS mountain_range_count
FROM
    mountains_countries as mc
JOIN
    mountains as m
ON
    mc.mountain_id = m.id
WHERE
    mc.country_code IN ('US', 'RU', 'BG')
GROUP BY
    mc.country_code
ORDER BY
    mountain_range_count DESC;
-------------------------------------------------------------------


13. Rivers in Africa
-------------------------------------------------------------------
SELECT
    c.country_name,
    r.river_name
FROM
    countries as c
LEFT JOIN
    countries_rivers as cr
USING
    (country_code)
LEFT JOIN
    rivers as r
ON
    r.id = cr.river_id
WHERE
    c.continent_code = 'AF'
ORDER BY
    c.country_name ASC
LIMIT 5;
-------------------------------------------------------------------


14. Minimum Average Area Across Continents - SUBQUERY - USEFUL
-------------------------------------------------------------------
SELECT
    MIN(average) AS min_average_area
FROM (
    SELECT
        AVG(area_in_sq_km) as average
    FROM
        countries
    GROUP BY
        continent_code
) AS average_area
-------------------------------------------------------------------


15. Countries Without Any Mountains
-------------------------------------------------------------------
SELECT
    count(*)
FROM
    countries as c
LEFT JOIN
    mountains_countries as mc
USING (country_code)
WHERE mountain_id IS NULL
-------------------------------------------------------------------


16. Monasteries by Country **
-------------------------------------------------------------------
-- ALTER TABLE countries
-- DROP COLUMN three_rivers;

CREATE TABLE monasteries (
    id SERIAL PRIMARY KEY,
    monastery_name VARCHAR(255),
    country_code CHAR(2)
    );

INSERT INTO
    monasteries (monastery_name, country_code)
VALUES
    ('Rila Monastery "St. Ivan of Rila"', 'BG'),
    ('Bachkovo Monastery "Virgin Mary"', 'BG'),
    ('Troyan Monastery "Holy Mother''s Assumption"', 'BG'),
    ('Kopan Monastery', 'NP'),
    ('Thrangu Tashi Yangtse Monastery', 'NP'),
    ('Shechen Tennyi Dargyeling Monastery', 'NP'),
    ('Benchen Monastery', 'NP'),
    ('Southern Shaolin Monastery', 'CN'),
    ('Dabei Monastery', 'CN'),
    ('Wa Sau Toi', 'CN'),
    ('Lhunshigyia Monastery', 'CN'),
    ('Rakya Monastery', 'CN'),
    ('Monasteries of Meteora', 'GR'),
    ('The Holy Monastery of Stavronikita', 'GR'),
    ('Taung Kalat Monastery', 'MM'),
    ('Pa-Auk Forest Monastery', 'MM'),
    ('Taktsang Palphug Monastery', 'BT'),
    ('SÃ¼mela Monastery', 'TR');


ALTER TABLE countries
ADD COLUMN
    three_rivers BOOLEAN DEFAULT FALSE;

UPDATE
    countries
SET three_rivers = (
    SELECT
        COUNT(*) >= 3
        FROM
            countries_rivers as cr
        WHERE cr.country_code = countries.country_code
    );

SELECT
    m.monastery_name,
    c.country_name
FROM
    monasteries AS m
JOIN
    countries as c
USING (country_code)
WHERE NOT three_rivers
ORDER BY
    monastery_name ASC;
-------------------------------------------------------------------


17. Monasteries by Continents and Countries**
-------------------------------------------------------------------
UPDATE countries
SET country_name = 'Burma'
WHERE country_name LIKE '%Myanmar%';

INSERT INTO monasteries (monastery_name, country_code)
VALUES
    ('Hanga Abbey', (SELECT countries.country_code FROM Countries WHERE countries.country_name = 'Tanzania')),
    ('Myin-Tin-Daik', (SELECT countries.country_code FROM Countries WHERE countries.country_name = 'Myanmar'));

SELECT
    co.continent_name as "Continent Name",
    c.country_name AS "Country Name",
    COUNT(m.id) AS "Monasteries Count"
FROM
    continents as co
LEFT JOIN
    countries as c
USING (continent_code)
LEFT JOIN
    monasteries as m
USING (country_code)
WHERE
    NOT three_rivers
GROUP BY
    c.country_name, co.continent_name
ORDER BY
    "Monasteries Count" DESC,
    "Country Name" ASC;
-------------------------------------------------------------------


18. Retrieving Information about Indexes
-------------------------------------------------------------------
SELECT
    tablename,
    indexname,
    indexdef
FROM
    pg_indexes
WHERE
    schemaname = 'public'
ORDER BY
    tablename ASC,
    indexname ASC;
-------------------------------------------------------------------


RANKING SYSTEMS IN POSTGRES:

In siftuni_management_db

RANK()	- GIVE US RANKED INDEXES AS SAME POSSITIONS ARE COUNTED AND NEXT POSITION IS SKIPPED AS MANY TIMES AS DUPLICATED
-------------------------------------------------------------------
SELECT
    first_name,
    last_name,
    salary,
    RANK() OVER (ORDER BY salary DESC) as "rank"
FROM
    employees
-------------------------------------------------------------------
RESULT:				RANK
Ken,Sanchez,128000.000,		1
James,Hamilton,86600.000,	2
Terri,Duffy,66000.000,		3
Laura,Norman,61600.000,		4
Dylan,Miller,53000.000,		5
Jean,Trenary,53000.000,		5
Wendy,Kahn,45800.000,		7
Roberto,Tamburello,45800.000,	7



DENSE_RANK() - GIVE US RANKING INDEXES WITH NO SKIPPING OF DUPLICATED PLACES
-------------------------------------------------------------------
SELECT
    first_name,
    last_name,
    salary,
    DENSE_RANK() OVER (ORDER BY salary DESC) as "rank"
FROM
    employees
-------------------------------------------------------------------

RESULT:				RANK

Ken,Sanchez,128000.000,		1
James,Hamilton,86600.000,	2
Terri,Duffy,66000.000,		3
Laura,Norman,61600.000,		4
Dylan,Miller,53000.000,		5
Jean,Trenary,53000.000,		5
Wendy,Kahn,45800.000,		6
Roberto,Tamburello,45800.000,	6




ROW_NUMBER() - GIVE US RANKED INDEXES AND DUPLICATES ARE ORDERED RANDOM
-------------------------------------------------------------------
SELECT
    first_name,
    last_name,
    salary,
    ROW_NUMBER() OVER (ORDER BY salary DESC) as "rank"
FROM
    employees
-------------------------------------------------------------------
RESULT:				RANK

Ken,Sanchez,128000.000,		1
James,Hamilton,86600.000,	2
Terri,Duffy,66000.000,		3
Laura,Norman,61600.000,		4
Dylan,Miller,53000.000,		5	# same as 6
Jean,Trenary,53000.000,		6	# same as 5
Wendy,Kahn,45800.000,		7	# same as 8
Roberto,Tamburello,45800.000,	8	# same as 7


RANK(), DENSE_RANK(), ROW_NUMBER AND PARTITION BY - SORT RESULTS RANKED BY FILTERED CRITERIA - department_id in this ase
-------------------------------------------------------------------
SELECT
    first_name,
    last_name,
    department_id,
    salary,
    ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) as "rank"
FROM
    employees
-------------------------------------------------------------------
RESIULT				PARTITIONED		SALARY		RANK

Terri,Duffy,			1,			66000.000,	1
Roberto,Tamburello,		1,			45800.000,	2
Jossef,Goldberg,		1,			35200.000,	3
Gail,Erickson,			1,			35200.000,	4
Rob,Walters,			2,			32300.000,	1
Thierry,D`Hers,			2,			27500.000,	2
Sariya,Harnpadoungsataya,	4,			16900.000,	1
Kevin,Brown,			4,			16000.000,	2
Jill,Williams,			4,			14400.000,	3
Mary,Gibson,			4,			14400.000,	4
David,Bradley,			5,			40000.000,	1




19. * Continents and Currencies
-------------------------------------------------------------------
CREATE VIEW continent_currency_usage AS
SELECT continent_code, currency_code, currency_usage
FROM (
    SELECT
        continent_code,
        currency_code,
        DENSE_RANK() OVER (
            PARTITION BY "continent_code"
            ORDER BY currency_usage DESC
            ) AS currency_rank,
        currency_usage
    FROM (
        SELECT
            continents.continent_code,
            countries.currency_code,
            COUNT(*) AS currency_usage
        FROM countries
        JOIN continents USING (continent_code)
        GROUP BY continents.continent_code, countries.currency_code
        HAVING COUNT(*) > 1
    ) AS grouped_currencies
) AS currencies_rank
WHERE currency_rank = 1
ORDER BY currency_usage DESC;
-------------------------------------------------------------------


20. * The Highest Peak in Each Country
-------------------------------------------------------------------
WITH row_number AS (
  SELECT
    c.country_name,
    p.peak_name,
    p.elevation,
    m.mountain_range,
    ROW_NUMBER() OVER (
        PARTITION BY c.country_name
        ORDER BY p.elevation DESC
        ) AS peak_rank
  FROM countries c
    LEFT JOIN mountains_countries mc on c.country_code = mc.country_code
    LEFT JOIN mountains m on mc.mountain_id = m.id
    LEFT JOIN peaks p on m.id = p.mountain_id
)
SELECT
    country_name,
    COALESCE(peak_name, '(no highest peak)') AS peak_name,
    COALESCE(elevation, 0) AS elevation,
    CASE
        WHEN peak_name IS NULL OR mountain_range IS NULL THEN '(no mountain)'
        ELSE mountain_range
    END AS mountain
FROM row_number
WHERE peak_rank = 1
ORDER BY country_name, elevation DESC;
-------------------------------------------------------------------


