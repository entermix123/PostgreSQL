In real life we can use 2 approaches:
1. Create first all tables and then create relations (constraints).
2. If we have ERD diagram, we can create tables with no relations or less relations first and then create tables with relations (constraints) to already created tables.


1. Database Design:
---------------------------------------------------------------------
CREATE TABLE owners (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    phone_number VARCHAR(15) NOT NULL,
    address VARCHAR(50)
);


CREATE TABLE animal_types (
    id SERIAL PRIMARY KEY,
    animal_type VARCHAR(30) NOT NULL
);


CREATE TABLE cages (
    id SERIAL PRIMARY KEY,
    animal_type_id INT NOT NULL,    --RELATION TO animal_types CASCADE

    CONSTRAINT fk_cages_animal_types
    FOREIGN KEY (animal_type_id)
    REFERENCES animal_types(id)
    ON DELETE CASCADE
);


CREATE TABLE animals (
    id SERIAL PRIMARY KEY,
    name VARCHAR(30) NOT NULL,
    birthdate DATE NOT NULL,
    owner_id INT,                   --RELATION TO owners CASCADE
    animal_type_id INT NOT NULL,    --RELATION TO animal_types CASCADE

    CONSTRAINT fk_animals_owners
    FOREIGN KEY (owner_id)
    REFERENCES owners(id)
    ON DELETE CASCADE,

    CONSTRAINT fk_animals_animal_types
    FOREIGN KEY (animal_type_id)
    REFERENCES animal_types(id)
    ON DELETE CASCADE
);


CREATE TABLE volunteers_departments(
    id SERIAL PRIMARY KEY,
    department_name VARCHAR(30) NOT NULL
);


CREATE TABLE volunteers(
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    phone_number VARCHAR(15) NOT NULL,
    address VARCHAR(50),
    animal_id INT,                  --RELATION WITH animals CASCADE
    department_id INT NOT NULL,     --RELATION WITH volunteers_departments CASCADE

    CONSTRAINT fk_volunteers_animals
    FOREIGN KEY (animal_id)
    REFERENCES animals(id)
    ON DELETE CASCADE,

    CONSTRAINT fk_volunteers_volunteers_departments
    FOREIGN KEY (department_id)
    REFERENCES volunteers_departments(id)
    ON DELETE CASCADE
);


CREATE TABLE animals_cages(
    cage_id INT NOT NULL,
    animal_id INT NOT NULL,

    CONSTRAINT fk_animals_cages_cages
    FOREIGN KEY (cage_id)
    REFERENCES cages(id)
    ON DELETE CASCADE,

    CONSTRAINT fk_animals_cages_animals
    FOREIGN KEY (animal_id)
    REFERENCES animals(id)
    ON DELETE CASCADE
);
---------------------------------------------------------------------


Insert data from datase.sql - copy, paste and execute SQL code from dataset to querytool in the created DB!



2. Insert
---------------------------------------------------------------------
INSERT INTO volunteers(name, phone_number, address, animal_id, department_id)
VALUES
        ('Anita Kostova', '0896365412', 'Sofia, 5 Rosa str.', 15, 1),
        ('Dimitur Stoev', '0877564223', NULL, 42, 4),
        ('Kalina Evtimova', '0896321112', 'Silistra, 21 Breza str.', 9, 7),
        ('Stoyan Tomov', '0898564100', 'Montana, 1 Bor str.', 18, 8),
        ('Boryana Mileva', '0888112233', NULL, 31, 5);

INSERT INTO animals (name, birthdate, owner_id, animal_type_id)
VALUES
    ('Giraffe', '2018-09-21', 21, 1),
    ('Harpy Eagle', '2015-04-17', 15, 3),
    ('Hamadryas Baboon', '2017-11-02', NULL, 1),
    ('Tuatara', '2021-06-30', 2, 4);
---------------------------------------------------------------------


3. Update
---------------------------------------------------------------------
UPDATE animals
SET owner_id = (SELECT owners.id FROM owners WHERE name = 'Kaloqn Stoqnov')
WHERE
    owner_id IS NULL
---------------------------------------------------------------------


4. Delete
---------------------------------------------------------------------
-- SELECT
--     id
-- FROM
--     volunteers_departments
-- WHERE
--     department_name = 'Education program assistant';

DELETE FROM volunteers_departments
WHERE id = (SELECT id FROM volunteers_departments WHERE department_name = 'Education program assistant')
---------------------------------------------------------------------


5. Volunteers
---------------------------------------------------------------------
SELECT
    name,
    phone_number,
    address,
    animal_id,
    department_id
FROM
    volunteers AS v
ORDER BY
    name ASC,
    animal_id ASC,
    department_id ASC;
---------------------------------------------------------------------


6. Animals Data
---------------------------------------------------------------------
SELECT
    a.name,
    at.animal_type,
    TO_CHAR(a.birthdate, 'DD.MM.YYYY') AS birthdate
FROM
    animals AS a
LEFT JOIN
    animal_types AS at
ON a.animal_type_id = at.id
ORDER BY
    a.name ASC;
---------------------------------------------------------------------


7. Owners and Their Animals
---------------------------------------------------------------------
SELECT
    o.name,
    count(a.id) AS "Count of animals"
FROM
    owners AS o
JOIN
    animals AS a
ON o.id = a.owner_id
GROUP BY
    o.name
ORDER BY
    "Count of animals" DESC,
    o.name ASC
LIMIT 5
---------------------------------------------------------------------


8. Owners, Animals and Cages
---------------------------------------------------------------------
SELECT
    CONCAT(o.name, ' ', '-', ' ',a.name) AS "Owner - Animal",
    o.phone_number,
    ac.cage_id AS "Cage ID"
FROM
    owners AS o
JOIN
    animals AS a
ON o.id = a.owner_id
JOIN
    animals_cages AS ac
ON a.id = ac.animal_id
JOIN
    animal_types AS at
ON a.animal_type_id = at.id
WHERE at.animal_type = 'Mammals'
ORDER BY
    o.name ASC,
    a.name DESC;
---------------------------------------------------------------------


9. Volunteers in Sofia
---------------------------------------------------------------------
SELECT
    v.name AS "Volunteers Name",
    v.phone_number AS "Phone Number",
    TRIM(v.address, 'Sofia, ') AS "Address"
FROM
    volunteers as v
JOIN
    volunteers_departments as vd
ON v.department_id = vd.id
WHERE
    vd.department_name = 'Education program assistant'
    AND
    v.address LIKE '%Sofia%'
ORDER BY
    v.name ASC
---------------------------------------------------------------------


10. Animals for Adoption
---------------------------------------------------------------------
SELECT
    a.name AS "Animal Name",
    extract('year' from a.birthdate) AS "Birth Year",
    at.animal_type AS "Animal Type"
FROM
    animals AS a
LEFT JOIN owners AS o
ON a.owner_id = o.id
JOIN
    animal_types AS at
ON a.animal_type_id = at.id
WHERE
    a.owner_id IS NULL
AND
    at.animal_type <> 'Birds'
AND
    AGE('01/01/2022', a.birthdate) < '5 years'
ORDER BY
    a.name;
---------------------------------------------------------------------


11. All Volunteers in a Department
---------------------------------------------------------------------
CREATE OR REPLACE FUNCTION fn_get_volunteers_count_from_department(
    searched_volunteers_department VARCHAR(30)) RETURNS INT
AS
$$
DECLARE
    volunteers_count INT;
BEGIN
    volunteers_count := (
    SELECT
        COUNT(v.id)
    FROM
        volunteers AS v
    JOIN
        volunteers_departments AS vd
    ON v.department_id = vd.id
    WHERE
        vd.department_name = searched_volunteers_department);
    RETURN volunteers_count;
END;
$$
LANGUAGE plpgsql;


SELECT fn_get_volunteers_count_from_department('Education program assistant');	result: 6

SELECT fn_get_volunteers_count_from_department('Guest engagement');		result: 4

SELECT fn_get_volunteers_count_from_department('Zoo events');			result: 5
---------------------------------------------------------------------


12. Animals with Owner or Not
---------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE sp_animals_with_owners_or_not(
    IN animal_name VARCHAR(30),
    OUT o_name VARCHAR(30)
)AS
$$
BEGIN
    SELECT
        o.name
    FROM
        owners AS o
    LEFT JOIN
        animals AS a
    ON o.id = a.owner_id
    WHERE a.name = animal_name
    INTO o_name;
    IF o_name IS NULL THEN
        o_name := 'For adoption';
    END IF;
    RETURN;
END;
$$
LANGUAGE plpgsql;

CALL sp_animals_with_owners_or_not('Pumpkinseed Sunfish', '')	result: Kamelia Yancheva
CALL sp_animals_with_owners_or_not('Hippo', '')			result: For adoption
CALL sp_animals_with_owners_or_not('Brown bear', '')		result: Gergana Mancheva
---------------------------------------------------------------------
