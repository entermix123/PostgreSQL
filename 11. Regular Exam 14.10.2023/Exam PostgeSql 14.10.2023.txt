0. CREATE DATABASE
---------------------------------------------
CREATE DATABASE soccer_talent_db;
---------------------------------------------


1. Database Design
---------------------------------------------
CREATE TABLE towns (
    id SERIAL PRIMARY KEY,
    name VARCHAR(45) NOT NULL
);


CREATE TABLE stadiums (
    id SERIAL PRIMARY KEY,
    name VARCHAR(45) NOT NULL,
    capacity INT NOT NULL,          --POSITIVE
    town_id INT NOT NULL,           --RELATION WITH towns CASCADE

    CONSTRAINT ck_stadiums_capacity
    CHECK ( capacity > 0 ),

    CONSTRAINT fk_stadiums_towns
    FOREIGN KEY (town_id)
    REFERENCES towns(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);

CREATE TABLE teams (
    id SERIAL PRIMARY KEY,
    name VARCHAR(45) NOT NULL,
    established DATE NOT NULL,
    fan_base INT NOT NULL DEFAULT 0,        --POSITIVE
    stadium_id INT NOT NULL,                --RELATION WITH stadiums CASCADE

    CONSTRAINT ck_teams_fan_base
    CHECK ( fan_base >= 0 ),

    CONSTRAINT fk_teams_stadiums
    FOREIGN KEY (stadium_id)
    REFERENCES stadiums(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);

CREATE TABLE coaches (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(10) NOT NULL,
    last_name VARCHAR(20) NOT NULL,
    salary NUMERIC(10, 2) NOT NULL DEFAULT 0,   --POSITIVE
    coach_level INT NOT NULL DEFAULT 0,         --POSITIVE

    CONSTRAINT ck_coaches_salary
    CHECK ( salary >= 0 ),

    CONSTRAINT ck_coaches_coach_level
    CHECK ( coach_level >= 0 )
);

CREATE TABLE skills_data (
    id SERIAL PRIMARY KEY,
    dribbling INT DEFAULT 0,            --POSITIVE
    pace INT DEFAULT 0,                 --POSITIVE
    passing INT DEFAULT 0,              --POSITIVE
    shooting INT DEFAULT 0,             --POSITIVE
    speed INT DEFAULT 0,                --POSITIVE
    strength INT DEFAULT 0,             --POSITIVE

    CONSTRAINT ck_skills_data_dribbling
    CHECK ( dribbling >= 0 ),

    CONSTRAINT ck_skills_data_pace
    CHECK ( pace >= 0 ),

    CONSTRAINT ck_skills_data_passing
    CHECK ( passing >= 0 ),

    CONSTRAINT ck_skills_data_shooting
    CHECK ( shooting >= 0 ),

    CONSTRAINT ck_skills_data_speed
    CHECK ( speed >= 0 ),

    CONSTRAINT ck_skills_data_strength
    CHECK ( strength >= 0 )
);

CREATE TABLE players (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(10) NOT NULL,
    last_name VARCHAR(20) NOT NULL,
    age INT NOT NULL DEFAULT 0,                 --POSITIVE
    position CHAR(1) NOT NULL,
    salary NUMERIC(10, 2) NOT NULL DEFAULT 0,   --POSITIVE
    hire_date TIMESTAMP,
    skills_data_id INT NOT NULL,                --RELATION WITH skills_data CASCADE
    team_id INT,                                --RELATION WITH teams CASCADE

    CONSTRAINT ck_players_age
    CHECK ( age >= 0 ),

    CONSTRAINT ck_players_salary
    CHECK ( salary >= 0 ),

    CONSTRAINT fk_players_skills_data
    FOREIGN KEY (skills_data_id)
    REFERENCES skills_data(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE,

    CONSTRAINT fk_players_teams
    FOREIGN KEY (team_id)
    REFERENCES teams(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);

CREATE TABLE players_coaches (
    player_id INT,                  --RELATION WITH players CASCADE
    coach_id INT,                   --RELATIONS WITH coaches CASCADE

    CONSTRAINT fk_players_coaches_players
    FOREIGN KEY (player_id)
    REFERENCES players(id)
    ON UPDATE CASCADE 
    ON DELETE CASCADE,

    CONSTRAINT fk_players_coaches_coaches
    FOREIGN KEY (coach_id)
    REFERENCES coaches(id)
    ON UPDATE CASCADE 
    ON DELETE CASCADE
);
---------------------------------------------

INSERT DATA FROM DATASET FILE !!!


2. Insert
---------------------------------------------
INSERT INTO coaches (first_name, last_name, salary, coach_level)
SELECT
    first_name,
    last_name,
    salary * 2 AS salary,
    LENGTH(first_name)
FROM
    players
WHERE
    hire_date < '2013-12-13 07:18:46'
---------------------------------------------


3. Update
---------------------------------------------
UPDATE coaches
SET
    salary = salary * coach_level
WHERE
    first_name LIKE 'C%'
    AND
        (SELECT
            COUNT(player_id)
        FROM
            players_coaches
        ) IS NOT NULL;

-- SELECT
--     first_name,
--     last_name,
--     salary,
--     coach_level
-- FROM
--     coaches
-- JOIN
--     players_coaches
-- ON coaches.id = players_coaches.coach_id
-- WHERE
--     first_name LIKE 'C%'
--     AND
--     player_id = (
--         SELECT
--             COUNT(player_id)
--         FROM
--             players_coaches
--         ) IS NOT NULL
---------------------------------------------


4. Delete
---------------------------------------------
DELETE FROM players
WHERE
    hire_date < '2013-12-13 07:18:46'
---------------------------------------------


5. Players
---------------------------------------------
SELECT
    CONCAT(p.first_name, ' ', p.last_name) AS full_name,
    age,
    hire_date
FROM
    players AS p
WHERE
    p.first_name LIKE 'M%'
ORDER BY
    age DESC,
    full_name;
---------------------------------------------


6. Offensive Players without Team
---------------------------------------------
SELECT
    p.id,
    CONCAT(p.first_name, ' ', p.last_name) AS full_name,
    p.age,
    p.position,
    p.salary,
    sd.pace,
    sd.shooting
FROM
    players AS p
JOIN
    skills_data AS sd
ON p.skills_data_id = sd.id
WHERE
    p.position = 'A'
    AND
    sd.pace + sd.shooting > 130
    AND
    p.team_id IS NULL;
---------------------------------------------


7. Teams with Player Count and Fan Base
---------------------------------------------
SELECT
    t.id,
    t.name,
    COUNT(p.id) AS player_count,
    t.fan_base
FROM
    players AS p
RIGHT JOIN
    teams AS t
ON p.team_id = t.id
WHERE
    t.fan_base > 30000
GROUP BY
    t.id, t.name, t.fan_base
ORDER BY
    player_count DESC,
    fan_base DESC;
---------------------------------------------


8. Coaches, Players Skills and Teams Overview
---------------------------------------------
SELECT
    CONCAT(c.first_name, ' ', c.last_name) AS coach_full_name,
    CONCAT(p.first_name, ' ', p.last_name) AS player_full_name,
    t.name,
    sd.passing,
    sd.shooting,
    sd.speed
FROM
    players AS p
JOIN
    skills_data AS sd
ON p.skills_data_id = sd.id
JOIN
    players_coaches AS pc
ON p.id = pc.player_id
JOIN
    coaches AS c
ON pc.coach_id = c.id
JOIN
    teams AS t
ON p.team_id = t.id
WHERE
    p.team_id IS NOT NULL
ORDER BY
    coach_full_name,
    player_full_name DESC;
---------------------------------------------


9. Stadium Teams Information
---------------------------------------------
CREATE OR REPLACE FUNCTION fn_stadium_team_name(
    stadium_name VARCHAR(30)
) RETURNS TABLE (
    name varchar(50)) AS
$$
BEGIN
    RETURN query
       SELECT
           t.name
       FROM
           teams AS t
       JOIN
            stadiums AS s
       ON t.stadium_id = s.id
       WHERE
           s.name = stadium_name
       ORDER BY
           t.name;
END;
$$
LANGUAGE plpgsql;

SELECT fn_stadium_team_name('BlogXS');

SELECT fn_stadium_team_name('Quaxo');

SELECT fn_stadium_team_name('Jaxworks');
---------------------------------------------


10. Player Team Finder
---------------------------------------------
CREATE OR REPLACE PROCEDURE sp_players_team_name(
    IN player_name VARCHAR(30),
    OUT team_name varchar(45)
) AS
$$
BEGIN
    team_name := (
    SELECT
        t.name
    FROM
        players AS p
    JOIN
        teams AS t
    ON p.team_id = t.id
    WHERE
        CONCAT(p.first_name, ' ', p.last_name) = player_name
        AND
        p.team_id IS NOT NULL);
    IF team_name IS NULL
        THEN team_name := 'The player currently has no team';
    END IF;
    RETURN;
END;
$$
LANGUAGE plpgsql;

CALL sp_players_team_name('Thor Serrels', '');

CALL sp_players_team_name('Walther Olenchenko', '');

CALL sp_players_team_name('Isaak Duncombe', '');
---------------------------------------------

